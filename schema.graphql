# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
}

type Manufacturer {
  id: ID!
  name: String
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
  createdAt: DateTime
}

input ManufacturerWhereUniqueInput {
  id: ID
}

input ManufacturerWhereInput {
  AND: [ManufacturerWhereInput!]
  OR: [ManufacturerWhereInput!]
  NOT: [ManufacturerWhereInput!]
  id: IDFilter
  name: StringFilter
  phones: PhoneManyRelationFilter
  createdAt: DateTimeFilter
}

input PhoneManyRelationFilter {
  every: PhoneWhereInput
  some: PhoneWhereInput
  none: PhoneWhereInput
}

input ManufacturerOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
}

input ManufacturerUpdateInput {
  name: String
  phones: PhoneRelateToManyForUpdateInput
  createdAt: DateTime
}

input PhoneRelateToManyForUpdateInput {
  disconnect: [PhoneWhereUniqueInput!]
  set: [PhoneWhereUniqueInput!]
  create: [PhoneCreateInput!]
  connect: [PhoneWhereUniqueInput!]
}

input ManufacturerUpdateArgs {
  where: ManufacturerWhereUniqueInput!
  data: ManufacturerUpdateInput!
}

input ManufacturerCreateInput {
  name: String
  phones: PhoneRelateToManyForCreateInput
  createdAt: DateTime
}

input PhoneRelateToManyForCreateInput {
  create: [PhoneCreateInput!]
  connect: [PhoneWhereUniqueInput!]
}

type Phone {
  id: ID!
  name: String
  price: Float
  manufacturer: Manufacturer
  createdAt: DateTime
  status: String
}

input PhoneWhereUniqueInput {
  id: ID
}

input PhoneWhereInput {
  AND: [PhoneWhereInput!]
  OR: [PhoneWhereInput!]
  NOT: [PhoneWhereInput!]
  id: IDFilter
  name: StringFilter
  price: FloatFilter
  manufacturer: ManufacturerWhereInput
  createdAt: DateTimeFilter
  status: StringNullableFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input PhoneOrderByInput {
  id: OrderDirection
  name: OrderDirection
  price: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
}

input PhoneUpdateInput {
  name: String
  price: Float
  manufacturer: ManufacturerRelateToOneForUpdateInput
  createdAt: DateTime
  status: String
}

input ManufacturerRelateToOneForUpdateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
  disconnect: Boolean
}

input PhoneUpdateArgs {
  where: PhoneWhereUniqueInput!
  data: PhoneUpdateInput!
}

input PhoneCreateInput {
  name: String
  price: Float
  manufacturer: ManufacturerRelateToOneForCreateInput
  createdAt: DateTime
  status: String
}

input ManufacturerRelateToOneForCreateInput {
  create: ManufacturerCreateInput
  connect: ManufacturerWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createManufacturer(data: ManufacturerCreateInput!): Manufacturer
  createManufacturers(data: [ManufacturerCreateInput!]!): [Manufacturer]
  updateManufacturer(where: ManufacturerWhereUniqueInput!, data: ManufacturerUpdateInput!): Manufacturer
  updateManufacturers(data: [ManufacturerUpdateArgs!]!): [Manufacturer]
  deleteManufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  deleteManufacturers(where: [ManufacturerWhereUniqueInput!]!): [Manufacturer]
  createPhone(data: PhoneCreateInput!): Phone
  createPhones(data: [PhoneCreateInput!]!): [Phone]
  updatePhone(where: PhoneWhereUniqueInput!, data: PhoneUpdateInput!): Phone
  updatePhones(data: [PhoneUpdateArgs!]!): [Phone]
  deletePhone(where: PhoneWhereUniqueInput!): Phone
  deletePhones(where: [PhoneWhereUniqueInput!]!): [Phone]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  manufacturer(where: ManufacturerWhereUniqueInput!): Manufacturer
  manufacturers(where: ManufacturerWhereInput! = {}, orderBy: [ManufacturerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ManufacturerWhereUniqueInput): [Manufacturer!]
  manufacturersCount(where: ManufacturerWhereInput! = {}): Int
  phone(where: PhoneWhereUniqueInput!): Phone
  phones(where: PhoneWhereInput! = {}, orderBy: [PhoneOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhoneWhereUniqueInput): [Phone!]
  phonesCount(where: PhoneWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
